package com.hungry.spring.main;

import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.hungry.spring.counter.service.CounterService;
import com.hungry.spring.member.service.MemberService;
import com.hungry.spring.member.vo.MemberVO;
import com.hungry.spring.review.service.ReviewService;
import com.hungry.spring.review.vo.ReviewVO;


@Controller("mainController")
public class MainController {
	
	@Autowired
	MemberService memberService;
	
	@Autowired
	ReviewService reviewService;
	
	@Autowired
	CounterService counterService;
	
	//메인화면
	@RequestMapping("/")
	public ModelAndView main(HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception{
		response.setContentType("text/html;charset=utf-8");
		PrintWriter out = response.getWriter();
		String m_id = (String) session.getAttribute("m_id");
		ModelAndView mv = new ModelAndView("/main/main");
		if(m_id != null) {
			MemberVO m = this.memberService.getMember(m_id);
			mv.addObject("m",m);
		}else {
			out.println("<script>");
			out.println("alert('세션이 만료되었습니다. 다시 로그인 해주세요');");
			out.println("history.back();");
			out.println("</script>");
		}
		Cookie[] cookies = request.getCookies();
		if(cookies != null) {
			for(Cookie c : cookies) {
				//"id"와 "name" 라는 이름의 쿠키가 있으면 세션에 쿠키의 값을 저장시켜준다.
				if(c.getName().equals("m_id")) {
					session.setAttribute("m_id", c.getValue());
				}
				if(c.getName().equals("m_name")) {
					session.setAttribute("m_name", c.getValue());
				}
			}
		}
		//세션값을통한 방문자수 받기
		this.counterService.setTotalCount();
		int totalCount = this.counterService.getTotalCount();
		int todayCount = this.counterService.getTodayCount();
		session.setAttribute("totalCount", totalCount);
		session.setAttribute("todayCount", todayCount);
		
		//리뷰객체리스트 받기
		List<ReviewVO> reviewlist = this.reviewService.getReviewList();
		mv.addObject("rvlist",reviewlist);
		//밥차 개수 받기
		int 
		mv.addObject("bobchaCount",bobCount);

		//리뷰 핀 리스트 받기
		List<HashMap<String,Object>> rvlatlng = new ArrayList<HashMap<String,Object>>();
		for(int i=0; i<reviewlist.size(); i++) {
			HashMap<String,Object> rv = new HashMap<String,Object>();
			rv.put("title",reviewlist.get(i).getRv_title());
			rv.put("lat",reviewlist.get(i).getRv_lat());
			rv.put("lng",reviewlist.get(i).getRv_lng());
			rv.put("rv_no",reviewlist.get(i).getRv_no());
			rvlatlng.add(rv);
			System.out.println(i+reviewlist.get(i).getRv_image_file());
		}
		mv.addObject("rvlatlng",rvlatlng);
		return mv;
	}
	
	@RequestMapping("/logout")
	public void logout(HttpSession session, HttpServletResponse response, HttpServletRequest request) throws Exception {
		session.invalidate();
		Cookie[] cookies = request.getCookies();
		if(cookies != null) {
			for(Cookie c : cookies) {
				if(c.getName().equals("id")) {
					c.setMaxAge(0);
					c.setPath("/");
					response.addCookie(c);
				}
				if(c.getName().equals("name")) {
					c.setMaxAge(0);
					c.setPath("/");
					response.addCookie(c);
				}
			}
		}
		response.setContentType("text/html;charset=utf-8");
		PrintWriter out = response.getWriter();
		out.println("<script>");
		out.println("alert('로그아웃 되었습니다.');");
		out.println("location.reload();");
		out.println("</script>");
	}

}
