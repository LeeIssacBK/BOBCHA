package com.hungry.spring.mypage.controller;

import java.io.File;
import java.io.PrintWriter;
import java.util.Calendar;
import java.util.List;
import java.util.Random;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.hungry.spring.board.service.BoardService;
import com.hungry.spring.board.vo.BoardVO;
import com.hungry.spring.member.service.MemberService;
import com.hungry.spring.member.vo.MemberVO;
import com.oreilly.servlet.MultipartRequest;

import pwdconv.PwdChange;

@Controller("mypageController")
@RequestMapping("/mypage")
public class MypageController {

	@Autowired// DI주입
	MemberService memberService;
	
	@Autowired
	BoardService boardService;
	
	//마이페이지 화면
	@RequestMapping("/mypage")
	public ModelAndView mypage(HttpServletResponse response, HttpSession session) throws Exception {
		response.setContentType("text/html;charset=utf-8");
		PrintWriter out = response.getWriter();
		String m_id = (String) session.getAttribute("m_id");
		if(m_id == null) {
			out.println("<script>");
			out.println("alert('세션이 만료되었습니다. 다시 로그인 해주세요');");
			out.println("history.back();");
			out.println("</script>");
		}else {
			MemberVO m = this.memberService.getMember(m_id);
			//내가 쓴리뷰 리스트 뽑기
			
			
			//내가 쓴글 리스트 뽑기
			List<BoardVO> myList = this.boardService.getMyBoardList(m_id);
			int mySize = this.boardService.getMyTotalCount(m_id);
			for(BoardVO b : myList) {
				b.setRegdate(b.getRegdate().substring(0,10));
			}
			ModelAndView mv = new ModelAndView("/mypage/mypage");
			mv.addObject("m",m);
			mv.addObject("myList",myList);
			mv.addObject("mySize",mySize);
			return mv;
		}
		return null;
	}
	
	//회원정보 수정
	@RequestMapping("/userEdit")
	public ModelAndView userEdit(HttpServletResponse response, HttpSession session) throws Exception{
		response.setContentType("text/html;charset=utf-8");
		PrintWriter out = response.getWriter();
		String m_id = (String) session.getAttribute("m_id");
		if(m_id == null) {
			out.println("<script>");
			out.println("alert('세션이 만료되었습니다. 다시 로그인 해주세요');");
			out.println("history.back();");
			out.println("</script>");
		}else {
			MemberVO m = this.memberService.getMember(m_id);
			ModelAndView mv = new ModelAndView();
			mv.addObject("m",m);
			mv.setViewName("/mypage/userEdit");
			return mv;
		}
		return null;
	}
	
	//회원수정 정보 갱신
	@RequestMapping("userEdit_ok")
	public String userEdit_ok(HttpServletResponse response, HttpServletRequest request, MemberVO m) throws Exception{
		response.setContentType("text/html;charset=utf-8");
		PrintWriter out = response.getWriter();
		
		//request는 바이너리파일로 받아서 파라미터로 받을수 없다.
		String saveFolder = request.getRealPath("./resources/upload");
		System.out.println(saveFolder);
		
		int fileSize = 5*1024*1024; //파일업로드 최대 크기
		MultipartRequest multi = null; //cos.jar로 받을 변수
		
		multi = new MultipartRequest(request, saveFolder,fileSize, "utf-8");
		
		m.setM_id(multi.getParameter("m_id"));
		m.setM_pw(PwdChange.getPassWordToXEMD5String(multi.getParameter("m_pw")));
		m.setM_name(multi.getParameter("m_name"));
		m.setM_pho_1(multi.getParameter("m_pho_1"));
		m.setM_pho_2(multi.getParameter("m_pho_2"));
		m.setM_pho_3(multi.getParameter("m_pho_3"));
		m.setM_post(multi.getParameter("m_post"));
		m.setM_addr_1(multi.getParameter("m_addr_1"));
		m.setM_addr_2(multi.getParameter("m_addr_2"));
		m.setM_addr_3(multi.getParameter("m_addr_3"));
		m.setM_email_id(multi.getParameter("m_email_id"));
		m.setM_email_domain(emailCheck(multi.getParameter("m_email_domain")));
		
		File upFile = multi.getFile("m_profile");
		
		if(upFile!=null) {
			String fileName = upFile.getName();
			Calendar c = Calendar.getInstance();
			int year = c.get(Calendar.YEAR);
			int month = c.get(Calendar.MONTH)+1;
			int date = c.get(Calendar.DATE);
			
			String homedir = saveFolder+"/"+year+"-"+month+"-"+date;
			File path1 = new File(homedir);
			
			if(!(path1.exists())) {
				path1.mkdir();
			}
			Random r = new Random();
			int random = r.nextInt(10000000);
			int index = fileName.lastIndexOf(".");
			String fileExtendsion = fileName.substring(index+1);
			String refileName = "m_profile"+year+month+date+random+"."+fileExtendsion;
			String fileDBName = "/"+year+"-"+month+"-"+date+"/"+refileName;
			upFile.renameTo(new File(homedir+"/"+refileName));
			m.setM_profile(fileDBName);
		}else {
			String fileDBName = "";
			m.setM_profile(fileDBName);
		}
		this.memberService.updateMember(m);
		out.println("<script>");
		out.println("alert('정보수정이 완료되었습니다.');");
		out.println("</script>");
		return "redirect:/?pv=mypage";
	}
	
	//회원탈퇴페이지
	@RequestMapping("/userDel")
	public ModelAndView userDel() {
		return new ModelAndView("/mypage/userDel");
	}
	
	//회원탈퇴처리
	@RequestMapping("/userDel_ok")
	public ModelAndView userDel_ok(HttpSession session, HttpServletRequest request, 
			HttpServletResponse response, MemberVO m) throws Exception {
		response.setContentType("text/html;charset=utf-8");
		PrintWriter out = response.getWriter();
		String m_id = (String) session.getAttribute("m_id");
		MemberVO mem = this.memberService.getMember(m_id);
		if(m_id == null) {
			out.println("<script>");
			out.println("alert('세션이 만료되었습니다. 다시 로그인 해주세요');");
			out.println("location.reload();");
			out.println("</script>");
		}else {
			if(mem.getM_pw().equals(PwdChange.getPassWordToXEMD5String(m.getM_pw()))) {
				mem.setM_del_cont(m.getM_del_cont());
				this.memberService.deleteMember(mem);
				session.invalidate(); //탈퇴처리 후 세션만료시킴
				Cookie[] cookies = request.getCookies(); //로그인체크상태일수있으므로 쿠키가 있을경우 쿠키 없애줌
				if(cookies != null) {
					for(Cookie c : cookies) {
						if(c.getName().equals("id")) {
							c.setMaxAge(0);
							c.setPath("/");
							response.addCookie(c);
						}
						if(c.getName().equals("name")) {
							c.setMaxAge(0);
							c.setPath("/");
							response.addCookie(c);
						}
					}
				}
				out.println("<script>");
				out.println("alert('회원탈퇴처리 완료되었습니다. 다음에 또 만나요.');");
				out.println("location.href = document.referrer;");
				out.println("</script>");
			}else {
				out.println("<script>");
				out.println("alert('비밀번호가 달라요.');");
				out.println("</script>");	
			}
		}
		return null;
	}
	
	
	//문자열 곱하기
	public static String mulString(int num, String s) {
		for(int i=0; i<num-3; i++) {
			s += s;
		}
		System.out.println(s);
		return s;
	}
	
	//직접입력으로 ,self가 입력된경우. ,self를 제거하고 DB에 저장
	public static String emailCheck(String email) {
		if(email.contains(",self")){
			int index = email.lastIndexOf(",");
			return email.substring(0,index);
		}
		return email;
	}
}
